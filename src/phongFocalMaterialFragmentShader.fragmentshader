#version 330 core
// Ouput data
out vec4 color;
in vec4 normal;
in vec4 position;
in vec2 TexCoord;

uniform float iluminacionAmbiental;
uniform float intensidadFuenteDifusa;
uniform float coeficienteDifuso;
uniform float intensidadFuenteEspecular;
uniform float coeficienteEspecular;
uniform float rugosidad;
uniform vec3 camPos;
uniform vec3 focusPosition;
uniform vec3 direccionFoco;
uniform float aperturaMax;
uniform float aperturaMin;

struct material{
sampler2D TexturaDifusa;
sampler2D TexturaEspecular;
float shininess;
};

uniform material miMaterial;


void main(){
vec4 iluminacionDifusa;
vec4 iluminacionEspecular;
vec4 colorOriginal = vec4(1,0,0,1);
vec3 iluminacionAmbientalL = vec3(texture(miMaterial.TexturaDifusa, TexCoord))*iluminacionAmbiental;

   float d = length(focusPosition - position.xyz);
   float fAtt = 1/(1+0.045*d + 0.0075*d*d);
   

vec3 incidenciaLuzNorm = normalize(focusPosition - position.xyz);


float theta = dot(incidenciaLuzNorm,normalize(-direccionFoco));

	if(theta>aperturaMax){
		float diff = max(dot(normalize(normal.xyz),incidenciaLuzNorm),0.0);
		vec3 diffuse = intensidadFuenteDifusa*coeficienteDifuso*diff*vec3(texture(miMaterial.TexturaDifusa, TexCoord));

		vec3 viewPortDir = normalize(camPos - position.xyz);
		vec3 reflectionDir = reflect(-incidenciaLuzNorm,normalize(normal.xyz));
		float esp = pow(max(dot(reflectionDir,viewPortDir),0.0),miMaterial.shininess);

		vec3 specular = intensidadFuenteEspecular*coeficienteEspecular*esp*vec3(texture(miMaterial.TexturaEspecular, TexCoord)); 

		float epsilon = aperturaMin - aperturaMax;
		float inte = clamp((theta-aperturaMax)/epsilon,0,1);
   
   vec3 sumaIluminaciones = specular+iluminacionAmbientalL + diffuse;

		color = vec4(inte*fAtt*sumaIluminaciones,1);
   
	}else{
	color = vec4(fAtt * iluminacionAmbientalL,1);
	}
	
}