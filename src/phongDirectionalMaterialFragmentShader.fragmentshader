#version 330 core
// Ouput data
out vec4 color;
in vec4 normal;
in vec4 position;
uniform float iluminacionAmbiental;
uniform vec3 incidenciaLuz;
uniform float intensidadFuenteDifusa;
uniform float coeficienteDifuso;
uniform float intensidadFuenteEspecular;
uniform float coeficienteEspecular;
uniform float rugosidad;
uniform vec3 camPos;
uniform vec3 focusPosition;
in vec2 TexCoord;

struct material{
sampler2D TexturaDifusa;
sampler2D TexturaEspecular;
float shininess;
};

uniform material miMaterial;

void main(){
vec4 iluminacionDifusa;
vec4 iluminacionEspecular;
vec4 colorOriginal = vec4(1,0,0,1);

vec3 iluminacionAmbientalL = vec3(texture(miMaterial.TexturaDifusa, TexCoord))*iluminacionAmbiental;

vec3 incidenciaLuzNorm = normalize(-incidenciaLuz);

    float diff = max(dot(normalize(normal.xyz), incidenciaLuzNorm), 0.0);

    vec3 reflectDir = reflect(-incidenciaLuzNorm, normalize(normal.xyz));
	vec3 directionToViewPoint = normalize(camPos - position.xyz);
	
	
    float spec = pow(max(dot(directionToViewPoint, reflectDir), 0.0), miMaterial.shininess);

    vec3 diffuse  = coeficienteDifuso * intensidadFuenteDifusa * diff * vec3(texture(miMaterial.TexturaDifusa, TexCoord));
	
    vec3 specular = 0.00001 * 0.00001 * spec * vec3(texture(miMaterial.TexturaEspecular, TexCoord));
	
color = vec4(iluminacionAmbientalL + diffuse + specular,1 );
//color = vec4(iluminacionAmbientalL + diffuse ,1 );

}